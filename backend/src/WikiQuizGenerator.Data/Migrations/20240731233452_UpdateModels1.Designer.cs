// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WikiQuizGenerator.Data;

#nullable disable

namespace WikiQuizGenerator.Data.Migrations
{
    [DbContext(typeof(WikiQuizDbContext))]
    [Migration("20240731233452_UpdateModels1")]
    partial class UpdateModels1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WikiQuizGenerator.Core.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectAnswerIndex")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("QuestionResponseId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionResponseId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswerIndex = 0,
                            Options = new List<string> { "Option A", "Option B", "Option C", "Option D" },
                            QuestionResponseId = 1,
                            Text = "What is this test question?"
                        });
                });

            modelBuilder.Entity("WikiQuizGenerator.Core.Models.QuestionResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AIResponseTime")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompletionTokenUsage")
                        .HasColumnType("integer");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PromptTokenUsage")
                        .HasColumnType("integer");

                    b.Property<int?>("QuizId")
                        .HasColumnType("integer");

                    b.Property<int>("WikipediaPageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("WikipediaPageId");

                    b.ToTable("QuestionResponses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AIResponseTime = 1000L,
                            CompletionTokenUsage = 20,
                            ModelName = "GPT-4",
                            PromptTokenUsage = 10,
                            WikipediaPageId = 1
                        });
                });

            modelBuilder.Entity("WikiQuizGenerator.Core.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Test Quiz"
                        });
                });

            modelBuilder.Entity("WikiQuizGenerator.Core.Models.WikipediaPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("Categories")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Extract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Langauge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string[]>("Links")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WikipediaPages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categories = new[] { "Category1", "Category2" },
                            Extract = "This is a test Wikipedia page extract.",
                            Langauge = "en",
                            LastModified = new DateTime(2024, 7, 31, 23, 34, 51, 912, DateTimeKind.Utc).AddTicks(290),
                            Length = 100,
                            Links = new[] { "Link1", "Link2" },
                            Title = "Test Wikipedia Page",
                            Url = "https://en.wikipedia.org/wiki/Test"
                        });
                });

            modelBuilder.Entity("WikiQuizGenerator.Core.Models.Question", b =>
                {
                    b.HasOne("WikiQuizGenerator.Core.Models.QuestionResponse", "QuestionResponse")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionResponse");
                });

            modelBuilder.Entity("WikiQuizGenerator.Core.Models.QuestionResponse", b =>
                {
                    b.HasOne("WikiQuizGenerator.Core.Models.Quiz", null)
                        .WithMany("QuestionResponses")
                        .HasForeignKey("QuizId");

                    b.HasOne("WikiQuizGenerator.Core.Models.WikipediaPage", "WikipediaPage")
                        .WithMany()
                        .HasForeignKey("WikipediaPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WikipediaPage");
                });

            modelBuilder.Entity("WikiQuizGenerator.Core.Models.QuestionResponse", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WikiQuizGenerator.Core.Models.Quiz", b =>
                {
                    b.Navigation("QuestionResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
