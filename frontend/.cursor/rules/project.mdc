---
description: 
globs: 
alwaysApply: false
---
# Project Coding Guidelines for Cursor AI (material-ui-vite-ts v5.0.0)

This document guides the AI in generating and modifying code for this project. Please adhere strictly to these rules, conventions, and the project structure. Guidelines consider standard best practices as of early April 2025.

## Core Technologies & Configuration

Our primary stack and configuration files:

- **Build Tool:** Vite (`vite.config.ts`)
- **Language:** TypeScript (`tsconfig.json`)
  - Strictly follow the compiler options (`strict` mode).
  - Utilize specific types; avoid `any`. Prefer `unknown` over `any` if type is truly unknown initially.
  - Use interfaces (`interface`) for defining the shape of objects and props. Use type aliases (`type`) for unions, intersections, primitives, and utility types.
  - Leverage utility types (`Partial`, `Pick`, `Omit`, `Readonly`, etc.) where appropriate.
  - Use `const` assertions (`as const`) for immutable arrays or objects where applicable.
  - Place shared types in `src/types/`. Component-specific types can reside with the component.
- **Framework:** React (`latest`)
  - **Style:** Use functional components with Hooks. Avoid class components.
  - **State Management:** Utilize React Hooks (`useState`, `useReducer`) and Context API (definitions in `src/context/`). Ensure Context is used judiciously to avoid unnecessary re-renders; consider memoization within context providers.
  - **Custom Hooks:** Define reusable logic in custom hooks within `src/hooks/`. Keep hooks focused.
  - **Performance:**
    - Memoization: Apply `React.memo` to components that receive complex props or are prone to re-rendering unnecessarily. Use `useMemo` for expensive computations and `useCallback` for functions (especially event handlers) passed down as props to memoized children or used in dependency arrays. Use these optimizations thoughtfully, not prematurely.
    - Code Splitting: Employ `React.lazy` and `Suspense` for route-based code splitting (e.g., wrapping route components) to improve initial load performance.
    - List Virtualization: If rendering very long lists (hundreds/thousands of items), consider if a virtualization library is needed (though none is currently installed). Generate list code mindful of potential performance issues.
  - **Error Handling:** Implement React Error Boundaries around logical sections of the UI (e.g., routes, major features) to catch rendering errors and display fallback UIs.
  - **Accessibility (a11y):** Write semantic HTML. Use ARIA attributes correctly when native semantics are insufficient. Strictly adhere to `eslint-plugin-jsx-a11y` rules (already configured).
- **Routing:** React Router DOM (`^6.26.1`)
  - Use components like `<BrowserRouter>`, `<Routes>`, `<Route>`, and hooks like `useNavigate`, `useParams`, `useLocation`.
  - Utilize layout routes for shared UI structures (e.g., sidebars, headers).
  - Implement protected route logic for authenticated sections.
- **UI Library:** Material UI (MUI) (`^6.0.0-beta.4`)
  - **Core:** Use components from `@mui/material`.
  - **Icons:** Use icons from `@mui/icons-material`.
  - **Styling Engine:** Emotion (`@emotion/react`, `@emotion/styled`). Prefer `sx` for instance-specific styles. Use `styled` for reusable styled components, especially if styles are complex or dynamic based on props.
  - **Theming:** Adhere strictly to the custom theme configurations defined in `src/themes/`. Use theme values (e.g., `theme.palette.primary.main`, `theme.spacing(2)`) consistently instead of hardcoded values. The application supports runtime theme switching, so ensure theme definitions in `src/themes/` are correctly structured and exported for import.
- **Data Fetching:** Axios (`^1.8.4`)
  - **Location:** Place data fetching logic within `src/services/`.
  - **Instance:** Consider creating a central, configured Axios instance (with base URL, default headers, potentially interceptors).
  - **Error Handling:** Implement robust and consistent error handling for API requests (e.g., using interceptors, try/catch blocks, dedicated error handling utilities). Provide user feedback on errors.
  - **Typing:** Define clear TypeScript interfaces/types for API request payloads and response data (in `src/types/` or co-located with services).
  - **Async:** Use `async/await` syntax for managing promises.
- **Date Handling:** date-fns (`^3.6.0`)
  - Use `date-fns` functions for reliable date manipulation, formatting, and parsing.
- **Internationalization (i18n):** i18next (`^23.12.2`), react-i18next (`^15.0.0`)
  - **Usage:** Use the `useTranslation` hook and `t` function. Ensure keys exist in locale files (`src/locales/`). Config is `src/i18n.ts`.
  - **Keys:** Use clear, descriptive keys. Maintain consistency across locale files.
  - **Features:** Utilize i18next features like interpolation, formatting, plurals correctly when needed.
- **Charting:** Recharts (`^2.15.1`)
  - Implement charts using components from `recharts` according to documentation. Ensure data passed is correctly formatted.
- **Utilities:** Place generic, reusable helper functions in `src/utils/`. Ensure they are pure functions where possible.
- **Authentication:** `jwt-decode` (`^4.0.0`) is available for decoding JWTs client-side if necessary. Handle token storage and refresh logic securely.

- **Linter:** ESLint (`^9.23.0`)
  - **Configuration:** `eslint.config.js`. Adhere strictly to _all_ rules. Project enforces `--max-warnings 0` â€“ **no warnings allowed**. Uses plugins for TS, React, Hooks, JSX A11y, Imports, Prettier.
- **Formatter:** Prettier (`^3.5.3`)
  - **Configuration:** (Likely `.prettierrc` or `package.json`). Format all code according to the project's configuration before finalizing. Scope defined in `format` script.

**AI Instruction:** Before finalizing code generation or edits, ensure the output conforms strictly to the settings in `tsconfig.json`, the ESLint rules in `eslint.config.js` (fixing all errors _and_ warnings), and the Prettier formatting style. Respect the defined project structure and apply the best practices outlined above.

## Project Structure Conventions

- **Components:** `src/components/` (Reusable UI components)
- **Context:** `src/context/` (React Context definitions)
- **Hooks:** `src/hooks/` (Custom React hooks)
- **Services:** `src/services/` (API interaction logic)
- **Themes:** `src/themes/` (MUI theme definitions using `createTheme`, supporting runtime switching)
- **Types:** `src/types/` (Shared TypeScript interfaces/types)
- **Utils:** `src/utils/` (General utility functions)
- **Locales:** `src/locales/` (i18n translation files)
- **Main Entry:** `src/main.tsx` / `src/App.tsx` (Application setup, core providers)

## General Code Quality & AI Collaboration

- **Modularity & Readability:** Write small, focused functions and components. Use clear names. Comment complex sections. Adhere to DRY principles.
- **Testability:** Design code to be testable (e.g., minimize side effects, allow dependency injection where appropriate), even if not writing tests now.
- **Context Awareness:** Analyze surrounding code and project structure for consistency.
- **Dependencies:** Only add new dependencies when explicitly asked. Use `npm install <package>` or `npm install --save-dev <package>`.
- **Vite:** Be mindful of Vite conventions (e.g., `import.meta.env` for environment variables).
- **Explanation:** Briefly explain complex logic or significant changes.
