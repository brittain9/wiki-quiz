#
# CI/CD Workflow for the WikiQuiz API Container App
#
name: WikiQuiz API Dev Deployment

#
# TRIGGERS: Controls when this workflow runs.
#
on:
  # 1. Run on pushes to the 'dev' branch, but only if files change in the backend.
  #    This prevents running the entire workflow for irrelevant changes (e.g., frontend or documentation).
  push:
    branches: [dev]
    paths:
      - "backend/**"
      - ".github/workflows/dev-backend.yml"

  # 2. Allows the workflow to be run manually from the GitHub Actions UI.
  workflow_dispatch:
    inputs:
      container_name:
        description: "Container name to deploy to (for multicontainer apps)"
        required: false
        default: "wiki-quiz"
        type: string
      force_rebuild:
        description: "Force rebuild of container image"
        required: false
        default: false
        type: boolean

#
# ENVIRONMENT VARIABLES: Defines reusable values for this workflow.
# This makes the steps below cleaner and easier to update in one place.
#
env:
  RESOURCE_GROUP: rg-wikiquiz-dev
  CONTAINER_APP_NAME: wikiquiz-api-dev
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: brittain9/wiki-quiz
  DOCKERFILE_PATH: src/WikiQuizGenerator.Api/Dockerfile # Relative to backend directory
  CONTEXT_PATH: backend
  # Use input parameter if provided, otherwise use default
  CONTAINER_NAME: ${{ github.event.inputs.container_name || 'wiki-quiz' }}
  # Always use dev tag for this workflow
  IMAGE_TAG: dev

#
# JOBS: Defines the sequence of tasks to execute.
#
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # PERMISSIONS: Securely grant tokens needed for Azure login and code checkout.
    permissions:
      id-token: write # Required for secure, passwordless OIDC login to Azure.
      contents: read # Required to check out the repository code.

    steps:
      # STEP 1: Check out the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # STEP 1.5: Display deployment information
      - name: Display Deployment Info
        run: |
          echo "üöÄ Dev Deployment Information:"
          echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo "Container App: ${{ env.CONTAINER_APP_NAME }}"
          echo "Container Name: ${{ env.CONTAINER_NAME }}"
          echo "Image: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "Force Rebuild: ${{ github.event.inputs.force_rebuild || 'false' }}"

      # STEP 2: Log in to Azure using OpenID Connect (OIDC).
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.WIKIQUIZAPIDEV_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.WIKIQUIZAPIDEV_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.WIKIQUIZAPIDEV_AZURE_SUBSCRIPTION_ID }}

      # STEP 3: Check if container app exists
      - name: Check Container App Status
        id: check_app
        run: |
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "app_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Container app ${{ env.CONTAINER_APP_NAME }} exists"
          else
            echo "app_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Container app ${{ env.CONTAINER_APP_NAME }} does not exist"
          fi

      # --- NEW STEP: Create the Container App config file in-line ---
      - name: Create Container App YAML Config
        run: |
          cat <<EOF > container-app-config.yml
          template:
            containers:
              - name: ${{ env.CONTAINER_NAME }}
                image: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          EOF

      # STEP 4: Build the container image and deploy to Azure Container Apps.
      - name: Build and Deploy Container App
        uses: azure/container-apps-deploy-action@v2
        with:
          # --- Configuration from Environment Variables ---
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          registryUrl: ${{ env.CONTAINER_REGISTRY }}

          # --- Use the config file we just created in the previous step ---
          yamlConfigPath: ./container-app-config.yml

          # --- Application Source and Build Configuration ---
          appSourcePath: ${{ env.CONTEXT_PATH }}
          dockerfilePath: ${{ env.DOCKERFILE_PATH }}
          imageToBuild: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

          # --- Registry Credentials ---
          registryUsername: ${{ secrets.WIKIQUIZAPIDEV_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.WIKIQUIZAPIDEV_REGISTRY_PASSWORD }}

      # STEP 5: Post-deployment verification
      - name: Verify Deployment
        run: |
          echo "üîç Verifying dev deployment..."
          sleep 30 # Wait a moment for the new revision to be provisioned
          APP_URL=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
          if [ -n "$APP_URL" ]; then
            echo "üåê Dev Application URL: https://$APP_URL"
            if curl -f --retry 5 --retry-delay 10 "https://$APP_URL/health" >/dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
            else
              echo "‚ö†Ô∏è Health check failed. The app might still be starting or has an issue. Please check the logs."
            fi
          else
            echo "‚ùå Could not retrieve application URL."
          fi

      # STEP 6: Deployment summary
      - name: Deployment Summary
        if: always()
        run: |
          echo "üìä Dev Deployment Summary:"
          echo "Status: ${{ job.status }}"
          echo "Image: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "Container App: ${{ env.CONTAINER_APP_NAME }}"
          echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
